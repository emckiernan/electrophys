{"type":"settings","kernel":"anaconda3","backend_state":"running","trust":true,"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.5.4"}},"kernel_usage":{"cpu":0,"memory":86994944},"kernel_state":"idle"}
{"type":"file","last_load":1511128863760}
{"type":"cell","id":"177b20","pos":14,"input":"fig = plt.figure()\n#Ejes y márgenes\nax= fig.add_axes([0,0,1,1])\n\nax.plot(freqs,power,label=\"Cubo\",linewidth=1.1,marker = \".\",markersize=1,\n       markerfacecolor=\"blue\")\n\nax.set_title('Espectro de Frecuencias')\nax.set_ylabel(\"Intensidad\")\nax.set_xlabel(\"Fecuencia\")","cell_type":"code","exec_count":0}
{"type":"cell","id":"716104","pos":5,"input":"### Función de autocorrelación","cell_type":"markdown"}
{"type":"cell","id":"16c907","pos":10,"input":"frq = np.fft.rfft(waveData,3000)","cell_type":"code","exec_count":0}
{"type":"cell","id":"066b89","pos":2,"input":"Usaremos los miesmos datos del notebook anterior, a modo de extensión.","cell_type":"markdown"}
{"type":"cell","id":"61e372","pos":11,"input":"fig = plt.figure(figsize=(10, 3), dpi=200)\n\nax = fig.add_subplot(1, 1, 1)\n\nax.set_xlabel('Frecuencia')\nax.set_ylabel('Amplitud')\nax.set_title('Transformada de Fourier del EMG (dominio de frecuencias)')\n\nax.plot(frq)\n\n","cell_type":"code","exec_count":0}
{"type":"cell","id":"39a955","pos":8,"input":"fig = plt.figure(figsize=(10, 3), dpi=200)\n\nax = fig.add_subplot(1, 1, 1)\n\nax.plot(t1,A)\n\n","cell_type":"code","exec_count":0}
{"type":"cell","id":"79bf74","pos":0,"input":"# Notebook 3","cell_type":"markdown"}
{"type":"cell","id":"bd66b4","pos":7,"input":"\nA = (autocorr(waveData[:10000]))\nt1 = np.arange(0,10000)/(sampleRate)\n","cell_type":"code","exec_count":0}
{"type":"cell","id":"cc5ebb","pos":3,"input":"record1 = wave.open('../Notebook_2/Dec0.wav', 'r') \nframes = record1.readframes(-1) \nwaveData = np.fromstring(frames, 'Int16')\n\nnumChannels = record1.getnchannels() #número de canales\nsampleRate = record1.getframerate()  #frecuencia de muestreo\nsampleWidth = record1.getsampwidth()\nnumFrames = record1.getnframes() \n\ntiempo = np.arange(0,len(waveData))/(sampleRate)","output":{"0":{"ename":"NameError","evalue":"name 'wave' is not defined","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-fb8afec57019>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mrecord1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mwave\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'../Notebook_2/Dec0.wav'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'r'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mframes\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrecord1\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreadframes\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mwaveData\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfromstring\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mframes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Int16'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mnumChannels\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrecord1\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgetnchannels\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m#número de canales\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'wave' is not defined"]}},"cell_type":"code","exec_count":1}
{"type":"cell","id":"9fe780","pos":13,"input":"power, freqs = matplotlib.mlab.psd(waveData[:10000], len(waveData), sampleRate)","cell_type":"code","exec_count":0}
{"type":"cell","id":"910640","pos":6,"input":"def autocorr(x):\n    result = np.correlate(x, x, mode='full')\n    half=int(result.size/2)\n    return result[half:]/max(result[half:])","cell_type":"code","exec_count":0}
{"type":"cell","id":"669fa4","pos":9,"input":"### Transformada de Fourier","cell_type":"markdown"}
{"type":"cell","id":"f2481d","pos":12,"input":"### PSD","cell_type":"markdown"}
{"type":"cell","id":"18a253","pos":15,"input":"","cell_type":"code","exec_count":0}
{"type":"cell","id":"4711d3","pos":4,"input":"# Plot EMG signal\nfig = plt.figure(figsize=(20, 5), dpi=100)\nplt.figure(1)\n\nplt.title('Electromiograma')\nplt.xlabel(r'tiempo (s)')\nplt.ylabel(r'voltaje ($\\mu$V)')\n\nplt.plot(tiempo,waveData)\n\nplt.xlim(0,max(tiempo))\nplt.show()\n","cell_type":"code","exec_count":0}
{"type":"cell","id":"ac6a31","pos":1,"input":"import numpy as np\nimport matplotlib.pyplot as plt\nimport wave","cell_type":"code","exec_count":0}