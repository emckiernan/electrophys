{"exec_count":1,"input":"Ahora sabes cuáles son los primeros e indispensables pasos para analizar computacionalmente cualquier conjunto de datos, en el siguiente tutorial cubriremos técnicas de análisis más específicas para extraer información valiosa de los datos.","state":"done","pos":13,"cell_type":"markdown","type":"cell","id":"83603f","kernel":"anaconda3"}
{"exec_count":2,"start":1520972824011,"input":"%matplotlib inline","state":"done","pos":0.5,"type":"cell","end":1520972824045,"id":"283dc2","kernel":"anaconda3"}
{"exec_count":3,"start":1520972824972,"input":"import numpy as np \nimport seaborn as sns  #Paquetería para visualización de datos\nfrom scipy import stats as st #Paquetería de computación estadísitica de scipy\nimport matplotlib.pyplot as plt","state":"done","pos":1,"cell_type":"code","type":"cell","end":1520972827143,"id":"f518be","kernel":"anaconda3"}
{"exec_count":4,"input":"#Asignaremos a los datos los nombres de normal y anormal, respectivamente para después manipularlos más facilmente.\nnormal = np.genfromtxt(\"./testdata1\", delimiter=\",\")\n\nanormal = np.genfromtxt(\"./testdata2\", delimiter=\",\")","state":"done","pos":3,"cell_type":"code","type":"cell","id":"83e150","kernel":"anaconda3"}
{"exec_count":5,"start":1520972827408,"input":"tiempo = np.arange(0,len(normal))*(1/256.0)  #arange hace un arreglo con números enteros desde cero hasta el tamaño de la serie de tiempo\n                                           #cada uno de los elementos de este arreglo se multiplica por .256 seg para obtener la escala de\n                                           #tiempo adecuada","state":"done","pos":5,"cell_type":"code","type":"cell","end":1520972827419,"id":"7cdfe1","kernel":"anaconda3"}
{"output":{"0":{"data":{"image/png":"5cfc4f7e50b2de02528397d73e1aab5c2ba5b053"},"metadata":{"image/png":{"width":1577,"height":778}}}},"exec_count":6,"start":1520972827999,"input":"fig = plt.figure(figsize=(8, 4), dpi=200)\n\nax1 = fig.add_subplot(2, 1, 1) #primer figura en un arreglo de dos renglones y una columna\nax1.plot(tiempo,normal,marker='.',ms=.2,lw=0.7)\nax1.set_ylabel('Amplitud')\nax1.set_title('Serie de tiempo muestra 1')\n\nax2 = fig.add_subplot(2, 1, 2) #segunda figura en un arreglo de dos renglones y una columna\nax2.plot(tiempo,anormal,marker='.',ms=.2,lw=.7)\nax2.set_ylabel('Amplitud')\nax2.set_xlabel('Tiempo [s]')\nax2.set_title('Serie de tiempo muestra 2')\n\n\nplt.tight_layout() #Hace que las gráficas y los textos no se sobrepongan.\n\nplt.show()","state":"done","pos":7,"cell_type":"code","type":"cell","end":1520972832874,"id":"4336bd","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/plain":"<matplotlib.axes._subplots.AxesSubplot at 0x7f488a2a8908>"},"exec_count":14},"1":{"metadata":{"image/png":{"width":386,"height":250}},"data":{"image/png":"53f956c6b44798460ad84014b67f16022c6edfa0"}}},"exec_count":14,"start":1520378844466,"input":"sns.distplot(normal,  #array del cual se obtendrá el histograma\n            bins =100, #número de columnas del histograma\n            kde=False,  #oculta la función de densidad de probabilidad estimada\n            norm_hist=True #normaliza el histograma\n            )\n\nsns.distplot(anormal,\n            bins =30,\n            kde=True,\n            norm_hist=True\n            )","state":"done","pos":9,"cell_type":"code","type":"cell","end":1520378845320,"id":"123836","kernel":"anaconda3"}
{"type":"cell","id":"11f5b3","pos":8,"input":"<a id='hist'></a>\n### Histograma de las amplitudes\nUn histograma es una gráfica que muestra que tan frecuentemente aparecieron los valores que toman los datos, dados ciertos intervalos, o categorías. Por ejemplo, hay distintas formas de obtener un histograma de amplitudes de una señal, para este caso, usaremos la paquetería $\\textbf{Seaborn}$ https://seaborn.pydata.org y el comando $\\textit{distplot}$, el cual genera un histograma de los datos y ajusta una distribución a los mismos:","cell_type":"markdown"}
{"type":"cell","id":"304aed","pos":11,"input":"sc.stats.describe(normal)","output":{"0":{"data":{"text/plain":"DescribeResult(nobs=11000, minmax=(0.0, 140.0916464563187), mean=47.076576774272489, variance=393.67566905690251, skewness=0.572291995434054, kurtosis=0.49240524972245137)"},"output_type":"execute_result","exec_count":56}},"cell_type":"code","exec_count":56}
{"type":"cell","id":"4315fb","pos":2,"input":"<a id='openfiles'></a>\n## 2. Apertura de archivos\nPara empezar, es necesario saber algunos detalles de la adquisición de los datos. Los datos de este ejemplo fueron obtenidos en una frecuencia de muestreo de 256 Hz; *i.e.* 256 datos por segundo. La apertura de los archivos que contienen los datos depende del formato de adquisición, que usualmente tiene asociada una extensión para los archivos. En este caso, los datos están en formato de texto separado por comas, en archivos con extensión .csv. Para abrir los archivos utilizaremos la paquetería de Python $\\textbf{numpy}$ y de ella, el comando $\\textit{genfromtext}$ (los detalles de este comando están en: https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.genfromtxt.html).","cell_type":"markdown"}
{"type":"cell","id":"60fc13","pos":0,"input":"# Tutorial 1. Extracción y visualización inicial de datos. \n### Noel Isaías Plascencia-Díaz, Erin C. McKiernan, Marco Arieli Herrera-Valdez,\n### Facultad de Ciencias, UNAM\n\n","cell_type":"markdown"}
{"type":"cell","id":"a50ebd","pos":0.25,"input":"<a id='introduction'></a>\n## 1. Introducción\nEl análisis de datos biológicos ocurre a menudo de forma iterativa, explorando, luego generalizando, y de regreso a la exploración. Una de las primeras exploraciones es la de extraer los datos de sus archivos producidos en el formato original de adquisición, y la visualización de los contenidos de los archivos. Este tutorial cubre ejemplos básicos de como abrir archivos con formato de texto separado por comas, una exploración visual básica de los mismos.\n\n\nLos primeros pasos para analizar computacionalmente datos en series de tiempo son:\n\n1) Abrir los datos (aunque suene obvio, esto puede tomar su tiempo).\n\n2) Graficar los datos.\n\nEs recomendable graficar los datos $\\textbf{siempre}$ antes de manipularlos de alguna otra forma, pues esto nos permite saber cual es su estructura y elegir un algoritmo de análisis adecuado. Los dos pasos anteriores son descritos en los párrafos siguientes. \n\n\n\n","cell_type":"markdown"}
{"type":"cell","id":"e75632","pos":6,"input":"<a id='visualization'></a>\n## 3. Visualización de los datos\nGraficaremos los datos utilizando el submódulo pyplot de python-matplotlib.","cell_type":"markdown"}
{"type":"cell","id":"ec90c7","pos":12,"input":"\nsc.stats.describe(anormal)","output":{"0":{"data":{"text/plain":"DescribeResult(nobs=11000, minmax=(0.0, 230.39251137119697), mean=105.51251483577066, variance=1727.1546184254876, skewness=0.38207109370427106, kurtosis=0.05934514621433529)"},"output_type":"execute_result","exec_count":54}},"cell_type":"code","exec_count":54}
{"type":"cell","id":"ecbdd9","pos":10,"input":"<a id='describe'></a>\n### Descripción estadística\nEs posible obtener medidas estadísticas básicas de manera rápida usando el \ncomando *describe* dentro del módulo *stats* de scipy.","cell_type":"markdown"}
{"type":"cell","id":"ed4d4e","pos":4,"input":"<a id='timescale'></a>\nPara la serie de tiempo asociada a los datos, generamos un arreglo con la escala de tiempo correspondiente al muestreo:","cell_type":"markdown"}
{"type":"cell","id":"f6fc19","pos":0.125,"input":"## Tabla de contenidos:\n[1. Introducción](#introduction)\n\n[2. ¿Cómo abrir archivos? ](#openfiles)\n\n[2.1 Escala temporal de los datos ](#timescale)\n\n[3. ¿Cómo graficar los datos?](#visualization)\n\n[3.1 Gráficas de histogramas](#hist)\n\n[4. Descripción estadística de los datos](#describe)","cell_type":"markdown"}
{"type":"file","last_load":1511833584786}
{"type":"settings","kernel":"anaconda3","backend_state":"running","trust":true,"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.5.4"}},"kernel_usage":{"cpu":0,"memory":87408640},"kernel_state":"idle"}