{"exec_count":1,"start":1520378959464,"input":"# muestra las gráficas\n%matplotlib inline","state":"done","pos":1,"cell_type":"code","type":"cell","end":1520378959491,"id":"9398be","kernel":"python3"}
{"exec_count":10,"start":1520380226978,"input":"derivada_voltaje = derive_signal(waveData,1/sampleRate);","state":"done","pos":16,"cell_type":"code","type":"cell","end":1520380239024,"id":"7c0c41","kernel":"python3"}
{"exec_count":12,"start":1520380240842,"input":"df = pd.DataFrame({'Tiempo':tiempo,'Amplitud':waveData}) \ndf;","state":"done","pos":19,"cell_type":"code","type":"cell","end":1520380240935,"id":"716115","kernel":"python3"}
{"exec_count":3,"start":1520380193273,"input":"import matplotlib.pyplot as plt\nimport scipy as sc\nfrom __future__ import division, print_function\nimport numpy as np\nimport wave\nimport pandas as pd\nimport seaborn as sns","state":"done","pos":2,"cell_type":"code","type":"cell","end":1520380196997,"id":"e284bc","kernel":"python3"}
{"exec_count":4,"start":1520380213460,"input":"record1 = wave.open('Dec0.wav', 'r') ","state":"done","pos":4,"cell_type":"code","type":"cell","end":1520380213472,"id":"07dec2","kernel":"python3"}
{"exec_count":5,"start":1520380216267,"input":"frames = record1.readframes(-1) #toma todos los frames de \"audio\", es decir, todos los puntos que corresponden a una amplitud en el registro","state":"done","pos":6,"cell_type":"code","type":"cell","end":1520380216277,"id":"843d14","kernel":"python3"}
{"exec_count":8,"start":1520380221283,"input":"# Obtiene la escala de tiempo \ntiempo = np.arange(0,len(waveData))/(sampleRate)","state":"done","pos":11,"cell_type":"code","type":"cell","end":1520380221335,"id":"1d9eec","kernel":"python3"}
{"exec_count":9,"start":1520380225901,"input":"def derive_signal(x,dt):\n    \n    l1 = len(x)-1\n    der_s = [-((x[i] - x[i+1])/dt) for i in range(0,l1)]\n    return der_s","state":"done","pos":15,"cell_type":"code","type":"cell","end":1520380225915,"id":"a8aa94","kernel":"python3"}
{"output":{"0":{"data":{"image/png":"af337e11770587206cc4ff52a11ed9b4601cda18"}}},"exec_count":10,"start":1520380048640,"input":"# Plot EMG signal\nfig = plt.figure(figsize=(20, 5), dpi=100)\nplt.figure(1)\n\nplt.title('Electromiograma')\nplt.xlabel(r'tiempo [s]')\nplt.ylabel(r'voltaje [$]')\n\nplt.plot(tiempo,waveData)\n\nplt.xlim(0,max(tiempo))\nplt.show()","state":"done","pos":13,"cell_type":"code","type":"cell","end":1520380051325,"id":"697ba1","kernel":"python3"}
{"output":{"0":{"data":{"text/plain":"[<matplotlib.lines.Line2D at 0x7f2613ecceb8>]"},"exec_count":13},"1":{"data":{"image/png":"92821bdd910331e22f13a4c6e2fad73c7880b7dd"}}},"exec_count":13,"start":1520380254369,"input":"filtered = df[(df[\"Amplitud\"]>400)] #selecciona amplitudes mayores a 400 microvolts\nplt.plot(filtered['Tiempo'],filtered['Amplitud'])","scrolled":true,"state":"done","pos":21,"cell_type":"code","type":"cell","end":1520380255603,"id":"6b2523","kernel":"python3"}
{"output":{"0":{"more_output":true}},"exec_count":11,"start":1520380239033,"input":"fig = plt.figure(figsize=(20, 5), dpi=100)\nplt.figure(1)\nplt.title('Electromiograma')\nplt.xlabel(r'tiempo [s]')\nplt.ylabel(r'$\\frac{dV}{dt}$ [$\\frac{$\\mu$V}{s}$]')\n\nplt.plot(derivada_voltaje)\n#plt.xlim(0,max(tiempo))\nplt.show()","scrolled":true,"state":"done","pos":17,"cell_type":"code","type":"cell","end":1520380240839,"id":"529339","kernel":"python3"}
{"output":{"0":{"name":"stderr","text":"/usr/local/lib/python3.5/dist-packages/ipykernel/__main__.py:1: DeprecationWarning: Numeric-style type codes are deprecated and will result in an error in the future.\n  if __name__ == '__main__':\n/usr/local/lib/python3.5/dist-packages/ipykernel/__main__.py:1: DeprecationWarning: The binary mode of fromstring is deprecated, as it behaves surprisingly on unicode inputs. Use frombuffer instead\n  if __name__ == '__main__':\n"}},"exec_count":6,"start":1520380217494,"input":"waveData = np.fromstring(frames, 'Int16')  #fromstring toma la variable \"frames\" y convierte sus elementos al tipo de variable 'Int16'\n                                           #es decir, números enteros","scrolled":true,"state":"done","pos":8,"cell_type":"code","type":"cell","end":1520380217575,"id":"bb0a3b","kernel":"python3"}
{"output":{"0":{"name":"stdout","text":"There is 1 channel.\nThe sampling rate is 44100 Hz.\n"}},"exec_count":7,"start":1520380219584,"input":"numChannels = record1.getnchannels() #número de canales\nsampleRate = record1.getframerate()  #frecuencia de muestreo\nsampleWidth = record1.getsampwidth()\nnumFrames = record1.getnframes() \n\nprint('There is %d channel.' % (numChannels))\nprint('The sampling rate is %d Hz.' % (sampleRate))","state":"done","pos":10,"cell_type":"code","type":"cell","end":1520380219601,"id":"ca7891","kernel":"python3"}
{"type":"cell","id":"03abe3","pos":22,"input":"Las funciones presentadas en este tutorial pueden servir  (entre otras cosas) como herramientas para preprocesar los datos y extraer sólamemte los fenómenos de interés. En el siguiente tutorial analizarenos la forma en la que fluctúan estos mismos datos para extraer información acerca del comportamiento global de la serie de tiempo.","cell_type":"markdown"}
{"type":"cell","id":"2a1828","pos":20,"input":"Ahora podemos seleccionar las amplitudes que nos interesan y graficarlas:","cell_type":"markdown"}
{"type":"cell","id":"557e39","pos":7,"input":"Es posible ver que *frames* tiene un formato de tipo *string*, es decir, interpretado como texto. Para que Python pueda interpretarlo como números, necesitamos hacer lo siguiente:","cell_type":"markdown"}
{"type":"cell","id":"57f622","pos":12,"input":"¡Ahora podemos graficar los datos!, puedes consultar un tutorial acerca de matplotlib en el siguiente link: http://mple.m-artwork.eu/tutorial","cell_type":"markdown"}
{"type":"cell","id":"5899e2","pos":2.75,"input":"## Tabla de contenidos\n[1. Introducción](#introduccion)\n\n[1.1 Extraer datos en formato .wav](#extract_wav)\n\n[1.2 Extraer características del muestreo](#extract_info)\n\n[2. Derivadas del voltaje](#derive)\n\n[3. Un filtro de amplitudes simple](#amp_filter)","cell_type":"markdown"}
{"type":"cell","id":"6133a9","pos":5,"input":"<a id='extract_wav'></a>\nLa librería $\\textit{wave}$ nos permite obtener los datos de la onda de la siguiente forma:","cell_type":"markdown"}
{"type":"cell","id":"87b104","pos":0,"input":"# Tutorial 2. Discriminar amplitudes de forma simple y cómo obtener derivadas de los datos.\n### Noel Isaías Plascencia-Díaz, Erin C. McKiernan, Marco Arieli Herrera-Valdez,\n### Facultad de Ciencias, UNAM\n\n","cell_type":"markdown"}
{"type":"cell","id":"ae3f7e","pos":3,"input":"<a id='introduction'></a>\n### Introducción (¡más formatos!)\nLos datos obtenidos en el laboratiorio no siempre están codificados en formatos que se puedan analizar como números (por ejemplo.txt,.xls,.csv). En este caso, analizaremos un par electromiogramas (EMG) , los cuales fueron obtenidos colocando electrodos en el brazo de un voluntario, a quien se le pidió que levantara un peso mientras se realizó el registro.\n\nEstos archivos están en formato .wav, por lo que es necesario abrirlos a traves de la librería $\\textit{wave}$ para poderlos manipular:","cell_type":"markdown"}
{"type":"cell","id":"d42350","pos":9,"input":"<a id='extract_info'></a>\nUn último paso antes de analizar los datos, es saber el número de canales de registro y la frecuencia de muestreo del mismo para tener una escala de tiempo adecuada:","cell_type":"markdown"}
{"type":"cell","id":"e998dd","pos":18,"input":"<a id='amp_filter'></a>\n### Discriminar amplitudes\nEs posible discriminar los datos considerando solamente las amplitudes que nos interesa estudiar. En el caso de los EMGs, las amplitudes que corresponden a potenciales de acción son se encuetran en el rango de  $ 10^{2} \\mu V$. Una forma de extraer amplitudes en este rango para nuestro registro es utilizar la paquetería $\\textit{Pandas}$, que sirve para tabular y acceder a datos de forma rápida y práctica.\n\nPara hacer lo anterior, primero es necesario colocar los datos en forma de $\\textit{dataframe}$:","cell_type":"markdown"}
{"type":"cell","id":"f821eb","pos":14,"input":"<a id='derive'></a>\n### Derivadas del voltaje\nUna forma de detectar cambios de interés en el comportamiento en los datos es calcular las derivadas discretas entre puntos sucesivos del registro. Para nuestro caso, la derivada del voltaje con respecto al tiempo es un indicador de la rapidéz con la que cambia la actividad muscular a lo largo del registro.","cell_type":"markdown"}
{"type":"file","last_load":1511897746078}
{"type":"settings","kernel":"python3","backend_state":"running","metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.5.2"}},"trust":true,"kernel_usage":{"cpu":0,"memory":87846912},"kernel_state":"idle"}